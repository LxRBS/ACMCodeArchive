{"scoring":null,"notes":"The following pictures illustrate all the three tests from the example.\r\n\r\n\\begin{center}\r\n\\begin{tabular}{c@{\\hskip 2cm}c@{\\hskip 2cm}c}\r\n\\includegraphics{guide.1} &\r\n\\includegraphics{guide.2} &\r\n\\includegraphics{guide.3}\r\n\\end{tabular}\r\n\\end{center}\r\n","legend":"Mister Gooti is the world-famous guide of The Freezing Isles. The topology of the Isles can be represented as a tree with cities at the vertices and two-way roads between them. \r\nGooti prepares a new sightseeing tour over the Isles. He wants to find the shortest path that starts in the capital and visits $k$ different cities, including the capital. Please, help him.","authorLogin":"elizarov","language":"english","timeLimit":3000,"output":"For each test, the first line of the output shall contain the length of the path $l$. The second line shall contain $l + 1$ integers~--- the cities that lie on the path in the order of the traversal.","inputFile":"stdin","outputFile":"stdout","input":"The first line of the input contains the number of tests $T$ ($1 \\leq T \\leq 100$). Each test consists of two lines. The first line contains the overall number of cities $n$ in the Isles and the requested number of cities $k$ for the tour ($1 \\leq k \\leq n \\leq 100$). The second line contains the description of the tree in a rooted manner: $n - 1$ integers where the $i$-th integer, $p_i$, is the parent of the city $i + 1$ ($1 \\leq p_i \\leq i$). The capital is the city with the number $1$~--- the root of the tree.","authorName":"Roman Elizarov","sampleTests":[{"output":"1\r\n1 2 \r\n8\r\n1 3 6 3 1 2 5 2 4 \r\n3\r\n1 2 3 4 \r\n","input":"3\r\n6 2\r\n1 1 2 2 3\r\n6 6\r\n1 1 2 2 3\r\n6 4\r\n1 2 3 4 5\r\n","inputFile":"example.01","outputFile":"example.01.a"}],"name":"Guide","interaction":null,"memoryLimit":536870912,"tutorial":"Suppose for a moment that we have to visit exactly $k$ vertices and return to the capital. In this case, it can be proven that the minimal length of the traversed path should be $2 (k - 1)$. However, in our problem we do not have to return to the capital: thus, the best way is to stop the traversal at the deepest vertex possible. So, we have to find a vertex $v$ which is the deepest and which path does not exceed $k$. Then, we have to simply restore some such path. To do that, for example, we count the number of vertices on the path to $v$ and run a depth-first search from the vertices on the path until we visit $k$ vertices."}