{"scoring":null,"notes":"","legend":"This problem statement is quite wordy by itself and does not need a legend. You are given a regular expression and your task is to render its corresponding automaton as an ASCII art text drawing following the specification in the problem statement. Please, see examples.\r\n\r\nA regular expression in this problem consists of uppercase letters from \\texttt{A} to \\texttt{Z}, special characters \\texttt{+}, \\texttt{?}, \\texttt{*}, and parenthesis that are used for grouping. An input to the problem is given by an \\synt{input} non-terminal of the following BNF grammar:\r\n\r\n\\begin{grammar}\r\n<input> ::= <expr>\r\n\r\n<expr> ::= <term> | <term> `|' <expr>\r\n\r\n<term> ::= <atom> | <atom><term> | <term><atom>\r\n\r\n<atom> ::= <letter> | `(' <expr> `)' | <atom> `+' | <atom> `?' | <atom> `*'\r\n\r\n<letter> ::= `A' | `B' | ... | `Z'\r\n\\end{grammar}\r\n\r\nA regular expression is rendered as an ASCII art picture using the precise rules that are given below. They recursively define a unique representation for each regular expression as a rectangular \\emph{box} of characters with the specified number of rows and columns. Empty characters of the representation, including trailing ones, must be filled with spaces.\r\n\r\nA \\synt{term} that consists of a sequence of $n$ uppercase letters is rendered as a box of 3 rows and $4 + n$ columns using \\texttt{+} and \\texttt{-} characters to render a border on the first and the last rows and columns as shown in the example. The production rule for the \\synt{term} non-terminal in the grammar is intentionally ambiguous. The longest possible sequence of adjacent \\synt{letter} non-terminals in the regular expression must be grouped into a \\synt{term} and rendered as a single box. \r\nFor example, a \\synt{term} of `\\texttt{NERC}' \r\nis rendered as the following $3 \\times 8$ box:\r\n\r\n\\begin{verbatim}\r\n+------+\r\n+ NERC +\r\n+------+\r\n\\end{verbatim}\r\n\r\nA \\synt{term} that consists of a sequence of \\synt{atom} non-terminals and \\synt{term} non-terminals with letters (as described above) is rendered by laying out the constituent boxes left-to-right, aligned vertically to the top, with 2 columns separating adjacent boxes. The height of the resulting box is equal to the maximum height of the constituent boxes.\r\nEach pair of adjacent boxes is joined by rendering \\texttt{->} characters on the 2nd row in the columns between them. \r\nFor example, a \\synt{term} of `\\texttt{N(E)RC}' (consisting of a sequence: \\synt{atom} of `\\texttt{A}', \\synt{atom} of `\\texttt{(E)}', and a letters-only \\synt{term} of `\\texttt{RC}')\r\nis rendered as the following $3 \\times 20$ box:\r\n\r\n\\begin{verbatim}\r\n+---+  +---+  +----+\r\n+ N +->+ E +->+ RC +\r\n+---+  +---+  +----+\r\n\\end{verbatim}\r\n\r\nAn \\synt{expr} that consists of a single \\synt{term} is rendered as its \\synt{term}.\r\n\r\nAn \\synt{expr} that consists of a `\\texttt{|}`-separated sequence of \\synt{term} non-literals is rendered by laying out the corresponding \\synt{term} boxes top-to-bottom, aligned to the left, with a single row separating adjacent \\synt{term} boxes. The width of the resulting box is equal to the maximum width of the \\synt{term} boxes plus 6. There are 3 additional columns on the left, and 3 on the right. The first column and the last column use \\texttt{+} and \\texttt{|} characters to join the 2nd rows of all the \\synt{term} boxes from the top to the bottom one, with \\texttt{+} placed on the 2nd row of each \\synt{term} box. The 2nd and the 3rd columns on the left and the 3rd-to-last and the 2nd-to-last columns on the right have \\texttt{->} characters on the 2nd rows of the corresponding \\synt{term} boxes. Additionally, shorter \\synt{term} boxes are connected on the right with extra \\texttt{-} characters on their 2nd rows. \r\nFor example, an \\synt{expr} of `\\texttt{C|ON|TEST}'\r\nis rendered as the following $11 \\times 14$ box:\r\n\r\n\\begin{minipage}{\\linewidth}\r\n\\begin{verbatim}\r\n   +---+         \r\n+->+ C +---->+\r\n|  +---+     |   \r\n|            |   \r\n|  +----+    |   \r\n+->+ ON +--->+   \r\n|  +----+    |   \r\n|            |   \r\n|  +------+  |   \r\n+->+ TEST +->+   \r\n   +------+      \r\n\\end{verbatim}\r\n\\end{minipage}\r\n\r\nAn \\synt{atom} of  `\\texttt{(}' \\synt{expr} `\\texttt{)}' is rendered as its \\synt{expr}.\r\n\r\nAn \\synt{atom} of \\synt{atom} `\\texttt{+}'  is rendered as a box of its source \\synt{atom} with 2 additional rows at the bottom and 6 additional columns (3 on the left and 3 on the right). The first and the last columns, starting with the 2nd row, and the last row are filled with the connecting characters as shown in the example. \r\n\r\n\\begin{shortitems}\r\n\\item The 2nd row starts with \\texttt{+->} and ends with \\texttt{->+} to connect to the 2nd row of the source \\synt{atom} box. \r\n\\item The last row starts with \\texttt{+<-} to represent a backwards edge in the automaton. \r\n\\end{shortitems}\r\n\r\nFor example, an \\synt{atom} of `\\texttt{A+}'\r\nis rendered as the following $5 \\times 11$ box. \r\n\r\n\\begin{verbatim}\r\n   +---+      \r\n+->+ A +->+\r\n|  +---+  |   \r\n|         |   \r\n+<--------+   \r\n\\end{verbatim}\r\n\r\nAn \\synt{atom} of \\synt{atom} `\\texttt{?}'  is rendered as a box of its source \\synt{atom} with 3 additional rows at the top and 6 additional columns (3 on the left and 3 on the right). The first and the last columns (from the 2nd to the 5th row) and the 2nd row are filled with the connecting characters as shown in the example. \r\n\r\n\\begin{shortitems}\r\n\\item The first row of \\synt{atom} `\\texttt{?}' is always empty (filled with spaces).\r\n\\item The 2nd row ends with \\texttt{->+} to represent an epsilon-edge in the corresponding automaton.\r\n\\item The 5th row starts with \\texttt{+->} and ends with \\texttt{->+} to connect to the 2nd row of the source \\synt{atom} box.\r\n\\end{shortitems}\r\n\r\nFor example, an \\synt{atom} of `\\texttt{B?}'\r\nis rendered as the following $6 \\times 11$ box. \r\n\r\n\\begin{verbatim}\r\n                 \r\n+-------->+\r\n|         |   \r\n|  +---+  |   \r\n+->+ B +->+   \r\n   +---+       \r\n\\end{verbatim}\r\n\r\nAn \\synt{atom} of \\synt{atom} `\\texttt{*}'  is rendered as a box of its source \\synt{atom} with 5 additional rows (3 at the top and 2 at the bottom) and 6 additional columns (3 on the left and 3 on the right). The first and the last columns, with the 2nd and the last row, are filled with the connecting characters as shown in the example. \r\n\r\n\\begin{shortitems}\r\n\\item The first row of \\synt{atom} `\\texttt{*}' is always empty (filled with spaces).\r\n\\item The 2nd row ends with \\texttt{->+} to represent an epsilon-edge in the corresponding automaton.\r\n\\item The 5th row starts with \\texttt{+->} and ends with \\texttt{->+} to connect to the 2nd row of the source \\synt{atom} box.\r\n\\item The last row starts with \\texttt{+<-} to represent a backwards edge in the automata. \r\n\\end{shortitems}\r\n\r\nFor example, an \\synt{atom} of `\\texttt{C*}'\r\nis rendered as the following $8 \\times 11$ box. \r\n\r\n\\begin{verbatim}\r\n                 \r\n+-------->+\r\n|         |   \r\n|  +---+  |   \r\n+->+ C +->+   \r\n|  +---+  |   \r\n|         |   \r\n+<--------+   \r\n\\end{verbatim}\r\n\r\nAn \\synt{input} is rendered as a box that has 6 more columns than the corresponding box of the \\synt{expr}, with 3 additional columns on the left, and 3 on the right. The 2nd row starts with \\texttt{S->} to represent the starting state of the automaton and ends with \\texttt{->F} to represent the final state of the automaton. See the example output.","authorLogin":"elizarov","language":"english","timeLimit":3000,"output":"On the first line of the output, write two integers $h$ and $w$~--- the height and the width, correspondingly, of the $h \\times w$ box that corresponds to the given \\synt{input}. On each of the next $h$ lines, write $w$ characters of the corresponding ASCII art rendering.\r\n","inputFile":"stdin","outputFile":"stdout","input":"The input consists of a single line that corresponds to the \\synt{input} non-terminal of the grammar given the problem statement and has at most 100 characters in length.","authorName":"Roman Elizarov","sampleTests":[{"output":"23 57\r\n      +---+               +----+        +---+            \r\nS->+->+ N +->+-------->+->+ ER +->+->+->+ C +->+->+->+->F\r\n   |  +---+  |         |  +----+  |  |  +---+  |  |  |   \r\n   |         |  +---+  |          |  |         |  |  |   \r\n   |         +->+ E +->+          |  +<--------+  |  |   \r\n   |            +---+             |               |  |   \r\n   |                              +<--------------+  |   \r\n   |                                                 |   \r\n   |                                                 |   \r\n   +->+--------------->+---------------------------->+   \r\n   |  |                |                             |   \r\n   |  |                |                             |   \r\n   |  +->+--------->+->+                             |   \r\n   |     |          |                                |   \r\n   |     |  +----+  |                                |   \r\n   |     +->+ IS +->+                                |   \r\n   |     |  +----+  |                                |   \r\n   |     |          |                                |   \r\n   |     +<---------+                                |   \r\n   |                                                 |   \r\n   |  +-----+  +----+  +--------+                    |   \r\n   +->+ CHA +->+ LL +->+ ENGING +------------------->+   \r\n      +-----+  +----+  +--------+                        ","input":"NE?(ER)C++|(IS)*?|(CHA((LL))ENGING)\r\n","inputFile":"example.01","outputFile":"example.01.a"}],"name":"ASCII Automata Art","interaction":null,"memoryLimit":536870912,"tutorial":""}