{"scoring":null,"notes":"","legend":"There was no problem about a cactus at the NERC 2020 online round. That's a bad mistake, \r\nso judges decided to fix it. You shall not pass to the World Finals 2021 without solving\r\na problem about a cactus!\r\n\r\nA \\emph{cactus} is a connected undirected graph in which every edge lies on at most one simple cycle. Intuitively, a cactus is a generalization of a tree where some cycles are allowed. Multiedges (multiple edges between a pair of vertices) and \r\nloops (edges that connect a vertex to itself) are not allowed in a cactus. \r\n\r\nCher has got a cactus. She calls cactus \\emph{strong} if it is impossible to add an edge to it in such a way that it still remains a cactus. But Cher thinks her cactus is not strong enough. She wants to add the smallest possible number of edges to it to make it strong, i.~e.~to create a new cactus with the same vertices, so that the original cactus is a subgraph of the new one, and it is impossible to add another edge to it so that the graph remains a cactus. Cher hired you to do this job for her. So\\ldots it's on you!\r\n","authorLogin":"elizarov","language":"english","timeLimit":3000,"output":"For each test case, first output the line with the minimal possible number of additional edges $A$. \r\nThen output $A$ lines, each describing one edge as $u_i$ $v_i$, where $u_i$ and $v_i$\r\nare the numbers of vertices to connect. After adding these edges, the resulting graph must be a strong cactus.\r\n","inputFile":"stdin","outputFile":"stdout","input":"The input consists of one or more independent test cases.\r\n\r\nThe first line of each test case contains two integers $n$ and $m$ \r\n($1 \\le n \\le 10^5$, $0 \\le m \\le 10^5$), where $n$ is the number of vertices in the graph. Vertices are numbered from $1$ to $n$. Edges of the graph are represented by a set of edge-distinct paths, where $m$ is the number of such paths. \r\n\r\nEach of the following $m$ lines contains a path in the graph. A path starts\r\nwith an integer number $s_i$ ($2 \\le s_i \\le 1000$) followed by $s_i$ integers\r\nfrom $1$ to $n$. These $s_i$ integers represent vertices of a path. Adjacent vertices in a path are distinct. The path can go through the same vertex multiple times, but every edge is traversed exactly once in the whole test case. There are no multiedges in the graph (there is at most one edge between any two vertices).\r\n\r\nThe last line of the input after all test cases always contains two zeros. It does \\textbf{not} define a test case. It just marks the end of the input and does not require any output.\r\n\r\nAll graphs in the input are cacti. The total sum of all values of $n$ and\r\nthe total sum of all values of $m$ throughout the input both do not exceed $10^5$.\r\n","authorName":"Roman Elizarov","sampleTests":[{"output":"1\r\n1 4\r\n0\r\n1\r\n5 4\r\n2\r\n1 3\r\n6 7\r\n","input":"6 1\r\n7 1 2 5 6 2 3 4\r\n3 1\r\n4 1 2 3 1\r\n5 2\r\n3 1 3 5\r\n3 1 2 4\r\n7 2\r\n6 1 2 3 4 5 3\r\n3 6 5 7\r\n0 0\r\n","inputFile":"example.01","outputFile":"example.01.a"}],"name":"Cactus Not Enough","interaction":null,"memoryLimit":536870912,"tutorial":"First of all let's find a condition on being strong cactus. Consider all 2-vertex-connected components of graph. Graph is cactus, so each of them is either cycle or a single edge. If there are two single-edge components, that share a vertex, graph isn't strong cactus, because an edge between other vertices can be added. On the other hand, is there are no such to components, no edge could be added, because path between it's ends would cover at least one edge, which already lies on cycle, and this edge would lie on two cycles, if we add first edge. More convenient form of same statement is ``cactus is strong, iff after removing all edges lying on cycle each connected component has at most one edge. \r\n\r\nConsider a set of edges $e_i$ we add to the graph. Lets $p_i$ be any simple path on initial graph between ends of edge $e_i$. Graph should still be cactus, so none of this path can go through any edge lying on cycle. So, this paths are unique, and problem is independent on each of connected components after removing all cycles. Also, this path must not intersect, or edge lying on two of them will lie on two cycles. So, our problem is splitted to several instances of following problem: given a tree, find minimum number of paths after removing which no two edges would be incident.\r\n\r\nThis problem could be solved either by dynamic programming, or by greedy algorithm. Dynamic programming, is quite straightforward on state (subtree, prefix of sons already covered, does we cover edge from parent, do we have an not covered edge). But implementing it (especially building answer itself) is quite error-prone, so lets focus on greedy. \r\n\r\nIn fact, we need to remove some matching from tree, and after it, cover a tree with paths. Number of paths required to cover a full tree is equal to number of vertices with odd degree divided by two. This can be done by making each edge a single path, and then joining paths in each vertex in any way, until it have at most one end of path. There would be exactly one path end at each odd-degree vertex after that. So, we need to find matching minimizing number of odd-degree vertices. Edges, which have at least one even-degree end can be removed from this matching, because they not decreasing number of odd-degree vertices. So we need just to find maximum matching on vertices with odd degree, which can be done be greedy algorithm, because our graph is a tree. \r\n\r\nIn fact, one can just go from bottom to top, joining paths in any way, and creating new path, only when it can't be not created. It can be shown, this greedy algorithm will leave uncovered exactly this greedy-found maximum matching on odd-degree vertices, and some edges between unmatched odd-degree vertices with even-degree, which doesn't change number of paths. \r\n\r\n"}