{"scoring":null,"notes":"","legend":"Johnny is the developer of Joint Password Storage (JPS). Storing passwords in plaintext is a bad idea. JPS splits each password into several parts and stores them separately.\r\n\r\nA password is a string consisting of digits and English letters. Bitwise XOR of all parts should be equal to the password. To attract less attention, Johnny decided that each part should look like something ordinary, like an arithmetic equality. What could be more ordinary than things like ``$2+2=4$''? \r\n\r\nFormally, a valid split of a password is a set of correct arithmetic equalities of the same length as the password, for which bitwise XOR of ASCII codes of characters on each position is equal to the ASCII code of the corresponding password character. A correct arithmetic equality is a string described by the following grammar, with both expressions evaluating to the same value. Operator precedence is standard: expressions in brackets of any type take precedence over all other operations, multiplication takes precedence over addition and subtraction, and operators with the same level of precedence are evaluated from left to right.\r\n\r\n\\begin{tabular}{rcl}\r\n$\\langle equality \\rangle$ &\\t{::=}& $\\langle expression \\rangle$ `\\t{=}' $\\langle expression \\rangle$ \\\\\r\n$\\langle expression \\rangle$ &\\t{::=}& $\\langle term \\rangle$ | $\\langle expression \\rangle$ `\\t{+}' $\\langle term \\rangle$ | $\\langle expression \\rangle$ `\\t{-}' $\\langle term \\rangle$  \\\\\r\n$\\langle term \\rangle$ &\\t{::=}& $\\langle multiplier \\rangle$ | $\\langle term \\rangle$ `\\t{*}' $\\langle multiplier \\rangle$ \\\\\r\n$\\langle multiplier \\rangle$ &\\t{::=}& $\\langle number \\rangle$ | `\\t{(}' $\\langle expression\\rangle$ `\\t{)}' |  `\\t{[}' $\\langle expression\\rangle$ `\\t{]}' | `\\t{\\{}' $\\langle expression \\rangle$ `\\t{\\}}' \\\\\r\n$\\langle number \\rangle$ &\\t{::=}& `\\t{0}' $\\ \\vert\\ $ ( `\\t{1}' | ... | `\\t{9}' ) $($ `\\t{0}' | ... | `\\t{9}' $)^*$\r\n\\end{tabular}\r\n\r\n\r\nFor your convenience, ASCII codes of all related characters are provided below:\r\n\\vspace{-2mm}\r\n\\begin{center}\r\n\\begin{tabular} {|c|c|c|c|c|c|c|c|c|c|c|c|c|}\r\n\\hline\r\n\\t{(}  & \\t{)}  & \\t{*}  & \\t{+}  & \\t{-}  &  \\t{0-9}    &  \\t{=}  & \\t{A-Z}   & \\t{[} & \\t{]}   & \\t{a-z}    &\\t{\\{}  & \\t{\\}} \\\\ \\hline\r\n40 & 41 & 42 & 43 & 45 &  48-57  &  61 & 65-90 & 91 & 93 & 97-122 &123 & 125 \\\\ \\hline\r\n\\end{tabular}\r\n\\end{center}\r\n\\vspace{-2mm}\r\n\r\n\r\nYour task is to write a splitting module which converts a password into bitwise XOR of several correct arithmetic equalities. ","authorLogin":"pkunyavskiy","language":"english","timeLimit":2000,"output":"For each password, if there is no valid split, output a line with a single word ``\\t{NO}''.\r\n\r\nOtherwise, the first line should contain a single word ``\\t{YES}''. The next line should contain one integer $k$ ($1 \\le k \\le 1000$)~--- the number of equalities in your split. Each of the next $k$ lines should contain one equality. It can be proven that if a solution exists, there is a solution where $k$ doesn't exceed 1000.","inputFile":"stdin","outputFile":"stdout","input":"The first line contains a single integer $P$ ($1 \\le P \\le 50$)~--- the number of passwords to split. \r\nEach of the next $P$ lines contains a single string~--- password $s$ ($10 \\le |s| \\le 50$). Passwords can contain digits and both lowercase and uppercase English letters. ","authorName":"Pavel Kunyavskiy","sampleTests":[{"output":"YES\r\n3\r\n9+91*9=828\r\n1+19+0=4*5\r\n999=1008-9\r\nNO\r\nYES\r\n7\r\n420+[1*2*3*4*5*6]=140+[1*10*1*[20-5-5]*10]\r\n10-1-{1}-{1}-{1}-{1}={1}+{1}+{1}+{{1}+{1}}\r\n739=1+{3}*{2}*{9}*{9}-3+{2}*7*11*1+{100}+1\r\n602211592866240={54321*67890}*9*{8*7*6*54}\r\n51-188*1*0*600198090+5=[0]*(1039-25-4)+8*7\r\n0*990-5127*11590*740*0*[3]*90=8*0*4885*2*8\r\n3*0-0*818*39=0*(6+10*(64))*200*(93+6+8+19)\r\n","input":"3\r\n1915090454\r\nCanIAlwaysSplitIt\r\n2020NorthwesternRussiaRegionalContestTaskJ\r\n","inputFile":"example.01","outputFile":"example.01.a"}],"name":"Joint Password Storage","interaction":null,"memoryLimit":536870912,"tutorial":""}