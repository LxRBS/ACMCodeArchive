/**
 * 在W×H的矩形内放小正方形，i号正方形的尺寸是i×i
 * 问最多能放多少个
 * W、H最多300，因此可以先深搜，再打表
*/
#include <bits/stdc++.h>
using namespace std;


int const T[14]= {0,1,5,14,30,55,91,140,204,285,385,506,650,819};
int W, H;
int Total;

bool Flag[30][30];

/// 以rc为左上角是否放得下n×n
inline bool isOK(int r, int c, int n){
    if(r+n>W || c+n>H) return false;
    for(int i=r,rows=r+n,cols=c+n;i<rows;++i)for(int j=c;j<cols;++j){
        if(Flag[i][j]) return false;
    }
    return true;
}

void fang(int r, int c, int n){
    for(int i=r,rows=r+n,cols=c+n;i<rows;++i){
        fill(Flag[i]+c, Flag[i]+cols, true);
    }
}

void clear(int r, int c, int n){
    for(int i=r,rows=r+n,cols=c+n;i<rows;++i){
        fill(Flag[i]+c, Flag[i]+cols, false);
    }    
}

bool dfs(int depth){
    if(0 == depth) return true;

    for(int i=0;i<W;++i)for(int j=0;j<H;++j){
        if(!isOK(i, j, depth)) continue;

        fang(i, j, depth);
        bool b = dfs(depth-1);
        if(b) return true;
        clear(i, j, depth);
    }
    return false;
}

bool isOK(int n){
    memset(Flag, 0, sizeof(Flag));    
    return dfs(n);
}

int proc(){
    if(W > H) swap(W, H);
    Total = W * H;
    int n = upper_bound(T, T+14, Total) - T - 1;
    while(n){
        if(isOK(n)) return n;
        -- n;
    }
    throw runtime_error("XXX");
}

void init(){
    int g[31][31] = {0};
    for(int i=1;i<=30;++i)g[1][i] = g[i][1] = 1;
    g[2][2] = 1;
    for(int i=3;i<=30;++i)g[2][i] = g[i][2] = 2;
    g[3][3] = g[3][4] = g[4][3] = 2;
    for(int i=5;i<=30;++i)g[3][i] = g[i][3] = 3;
    for(int w=4;w<=30;++w)for(int h=w;h<=30;++h){
        W = w, H = h;
        printf("%d %d\n", w, h);
        g[w][h] = g[h][w] = proc();
    }
    freopen("2.txt","w",stdout);
    printf("int const G[31][31] = {\n");
    for(int i=0;i<31;++i){
        printf("   ,{%d", g[i][0]);
        for(int j=1;j<31;++j){
            printf(", %d", g[i][j]);
        }
        printf("}\n");
    } 
    printf("};\n");
}

int const G[31][31] = {
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}
   ,{0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1}
   ,{0, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2}
   ,{0, 1, 2, 2, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3}
   ,{0, 1, 2, 2, 2, 3, 3, 3, 3, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4}
   ,{0, 1, 2, 3, 3, 3, 3, 4, 4, 4, 4, 4, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5}
   ,{0, 1, 2, 3, 3, 3, 3, 4, 4, 4, 4, 4, 5, 5, 5, 5, 5, 5, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6}
   ,{0, 1, 2, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5, 5, 5, 6, 6, 6, 6, 6, 6, 6, 7, 7, 7, 7, 7, 7, 7, 7, 7}
   ,{0, 1, 2, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5, 5, 5, 6, 6, 6, 6, 6, 6, 6, 7, 7, 7, 7, 7, 7, 7, 7, 8}
   ,{0, 1, 2, 3, 4, 4, 4, 5, 5, 5, 5, 6, 6, 6, 6, 6, 6, 6, 7, 7, 7, 7, 7, 7, 7, 7, 8, 8, 8, 8, 8}
   ,{0, 1, 2, 3, 4, 4, 4, 5, 5, 5, 5, 6, 6, 6, 6, 6, 6, 6, 7, 7, 7, 7, 7, 7, 7, 7, 8, 8, 8, 8, 8}
   ,{0, 1, 2, 3, 4, 4, 4, 5, 5, 6, 6, 6, 6, 6, 7, 7, 7, 7, 7, 7, 7, 8, 8, 8, 8, 8, 8, 8, 8, 8, 9}
   ,{0, 1, 2, 3, 4, 5, 5, 5, 5, 6, 6, 6, 6, 7, 7, 7, 7, 7, 7, 7, 7, 8, 8, 8, 8, 8, 8, 8, 8, 8, 9}
   ,{0, 1, 2, 3, 4, 5, 5, 5, 5, 6, 6, 6, 7, 7, 7, 7, 7, 8, 8, 8, 8, 8, 8, 8, 9, 9, 9, 9, 9, 9, 9}
   ,{0, 1, 2, 3, 4, 5, 5, 5, 5, 6, 6, 7, 7, 7, 7, 8, 8, 8, 8, 8, 8, 8, 8, 8, 9, 9, 9, 9, 9, 9, 9}
   ,{0, 1, 2, 3, 4, 5, 5, 6, 6, 6, 6, 7, 7, 7, 8, 8, 8, 8, 8, 8, 9, 9, 9, 9, 9, 9, 9, 10, 10, 10, 10}
   ,{0, 1, 2, 3, 4, 5, 5, 6, 6, 6, 6, 7, 7, 7, 8, 8, 8, 8, 8, 8, 9, 9, 9, 9, 9, 9, 9, 10, 10, 10, 10}
   ,{0, 1, 2, 3, 4, 5, 5, 6, 6, 6, 6, 7, 7, 8, 8, 8, 8, 8, 9, 9, 9, 9, 9, 9, 10, 10, 10, 10, 10, 10, 10}
   ,{0, 1, 2, 3, 4, 5, 6, 6, 6, 7, 7, 7, 7, 8, 8, 8, 8, 9, 9, 9, 9, 9, 9, 10, 10, 10, 10, 10, 10, 10, 11}
   ,{0, 1, 2, 3, 4, 5, 6, 6, 6, 7, 7, 7, 7, 8, 8, 8, 8, 9, 9, 9, 9, 9, 10, 10, 10, 10, 10, 11, 11, 11, 11}
   ,{0, 1, 2, 3, 4, 5, 6, 6, 6, 7, 7, 7, 7, 8, 8, 9, 9, 9, 9, 9, 9, 10, 10, 10, 10, 10, 11, 11, 11, 11, 11}
   ,{0, 1, 2, 3, 4, 5, 6, 6, 6, 7, 7, 8, 8, 8, 8, 9, 9, 9, 9, 9, 10, 10, 10, 10, 10, 10, 11, 11, 11, 11, 11}
   ,{0, 1, 2, 3, 4, 5, 6, 7, 7, 7, 7, 8, 8, 8, 8, 9, 9, 9, 9, 10, 10, 10, 10, 10, 10, 11, 11, 11, 11, 11, 11}
   ,{0, 1, 2, 3, 4, 5, 6, 7, 7, 7, 7, 8, 8, 8, 8, 9, 9, 9, 10, 10, 10, 10, 10, 10, 11, 11, 11, 11, 11, 12, 12}
   ,{0, 1, 2, 3, 4, 5, 6, 7, 7, 7, 7, 8, 8, 9, 9, 9, 9, 10, 10, 10, 10, 10, 10, 11, 11, 11, 11, 11, 11, 12, 12}
   ,{0, 1, 2, 3, 4, 5, 6, 7, 7, 7, 7, 8, 8, 9, 9, 9, 9, 10, 10, 10, 10, 10, 11, 11, 11, 11, 11, 11, 12, 12, 12}
   ,{0, 1, 2, 3, 4, 5, 6, 7, 7, 8, 8, 8, 8, 9, 9, 9, 9, 10, 10, 10, 11, 11, 11, 11, 11, 11, 11, 11, 12, 12, 12}
   ,{0, 1, 2, 3, 4, 5, 6, 7, 7, 8, 8, 8, 8, 9, 9, 10, 10, 10, 10, 11, 11, 11, 11, 11, 11, 11, 11, 12, 12, 12, 12}
   ,{0, 1, 2, 3, 4, 5, 6, 7, 7, 8, 8, 8, 8, 9, 9, 10, 10, 10, 10, 11, 11, 11, 11, 11, 11, 12, 12, 12, 12, 12, 12}
   ,{0, 1, 2, 3, 4, 5, 6, 7, 7, 8, 8, 8, 8, 9, 9, 10, 10, 10, 10, 11, 11, 11, 11, 12, 12, 12, 12, 12, 12, 12, 12}
   ,{0, 1, 2, 3, 4, 5, 6, 7, 8, 8, 8, 9, 9, 9, 9, 10, 10, 10, 11, 11, 11, 11, 11, 12, 12, 12, 12, 12, 12, 12, 13}
};


int main(){
    // init();
#ifndef ONLINE_JUDGE
    freopen("1.txt","r",stdin);
#endif
    scanf("%d%d", &W, &H);
    printf("%d\n", G[W][H]);
    return 0;
}