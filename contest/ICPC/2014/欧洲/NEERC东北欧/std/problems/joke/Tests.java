/******************************************************************/
/* ACM ICPC 2014-2015                                             */
/* Northeastern European Regional Contest                         */
/* St Petersburg - Barnaul - Tbilisi - Tashkent, December 7, 2014 */
/******************************************************************/
/* Problem J. Jokewithpermutation                                 */
/*                                                                */
/* Original idea         Mikhail Dvorkin                          */
/* Problem statement     Mikhail Dvorkin                          */
/* Test set              Maxim Babenko                            */
/******************************************************************/
/* Tests                                                          */
/*                                                                */
/* Author                Maxim Babenko                            */
/******************************************************************/

import java.io.*;
import java.util.*;

public class Tests {
	private static File dir = new File("tests");
	private int curTest = 1;
	private static boolean verbose = true;

	private String testName;
	private PrintWriter out;
	private Random r = new Random(5516681322906813814L);

	public void run() {
		t(4, 1, 11, 10, 9, 8, 7, 6, 5, 3, 2);
		t(1);
		t(1, 2);
		t(2, 1);
		tr(9);
		tr(11);
		tr(20);
		for (int i = 5; i >= 0; i--) {
			tr(50 - i);
		}
		{
			List<Integer> a = new ArrayList<>();
			for (int i = 1; i <= 50; i++) {
				a.add(i);
			}
			t(a);
			Collections.reverse(a);
			t(a);
			Collections.sort(a, new Comparator<Integer>() {
				@Override
				public int compare(Integer x, Integer y) {
					return ("" + x).compareTo("" + y);
				}
			});
			t(a);
			Collections.reverse(a);
			t(a);
			Collections.sort(a, new Comparator<Integer>() {
				@Override
				public int compare(Integer x, Integer y) {
					return (new StringBuilder().append(x).reverse().toString())
						.compareTo(new StringBuilder().append(y).reverse().toString());
				}
			});
			t(a);
			Collections.reverse(a);
			t(a);
		}
		//MB: Several genetic tests vs joke_mb_search
        t(1, 12, 2, 24, 38, 35, 17, 32, 19, 41, 23, 44, 42, 16, 39, 25, 13, 47, 15, 46, 28, 33, 31, 29, 27, 45, 18, 36, 14, 37, 48, 26, 49, 30, 20, 50, 10, 40, 34, 21, 4, 3, 7, 5, 8, 9, 6, 43, 22, 11);
        t(4, 34, 1, 16, 12, 19, 33, 31, 37, 25, 22, 24, 23, 44, 48, 45, 46, 15, 28, 32, 17, 14, 29, 35, 49, 36, 18, 26, 47, 39, 27, 38, 40, 30, 20, 10, 50, 21, 11, 13, 42, 9, 6, 3, 7, 5, 41, 2, 8, 43);
        t(4, 33, 2, 42, 19, 12, 13, 45, 46, 22, 23, 31, 11, 44, 48, 36, 27, 37, 15, 39, 26, 28, 41, 47, 16, 49, 25, 17, 35, 38, 29, 18, 10, 30, 20, 50, 40, 24, 21, 34, 14, 7, 6, 5, 9, 8, 3, 1, 32, 43);
        t(2, 43, 3, 31, 32, 22, 34, 44, 36, 11, 12, 14, 18, 25, 47, 29, 49, 27, 45, 42, 39, 15, 37, 17, 26, 35, 28, 19, 48, 46, 16, 38, 50, 20, 40, 30, 10, 21, 41, 13, 23, 6, 8, 5, 7, 9, 4, 1, 33, 24);
        //MB: Several genetic tests vs joke_mb
        t(20, 24, 22, 4, 34, 23, 43, 11, 7, 12, 44, 41, 42, 5, 15, 40, 14, 8, 10, 37, 39, 17, 13, 3, 33, 21, 6, 25, 30, 50, 28, 26, 45, 35, 16, 1, 31, 48, 27, 19, 18, 49, 47, 36, 38, 46, 2, 32, 9, 29);
        t(50, 1, 5, 28, 45, 46, 26, 2, 34, 44, 11, 9, 22, 4, 3, 6, 25, 37, 38, 35, 15, 10, 14, 21, 8, 39, 48, 49, 19, 18, 12, 7, 16, 17, 40, 24, 36, 30, 47, 13, 23, 41, 32, 33, 31, 42, 43, 27, 20, 29);
        t(35, 37, 1, 43, 39, 30, 16, 20, 50, 17, 2, 33, 42, 9, 13, 23, 3, 31, 4, 21, 8, 38, 19, 11, 5, 18, 45, 22, 41, 34, 44, 24, 6, 36, 25, 29, 26, 12, 7, 49, 14, 32, 46, 47, 48, 40, 27, 15, 28, 10);
        t(25, 12, 42, 6, 28, 35, 14, 22, 21, 41, 9, 49, 47, 10, 13, 33, 2, 31, 8, 36, 29, 30, 40, 19, 11, 7, 50, 1, 3, 23, 44, 4, 34, 5, 15, 26, 16, 48, 27, 24, 32, 43, 45, 46, 17, 37, 18, 20, 38, 39);
        t(37, 45, 17, 24, 25, 40, 48, 12, 7, 13, 4, 32, 44, 41, 9, 27, 19, 36, 11, 6, 35, 29, 1, 3, 22, 33, 31, 8, 20, 28, 18, 26, 15, 38, 46, 49, 16, 14, 2, 34, 23, 43, 21, 42, 5, 39, 47, 10, 30, 50);
        t(16, 36, 27, 12, 44, 42, 43, 5, 3, 41, 7, 25, 2, 31, 4, 22, 23, 21, 9, 10, 11, 8, 20, 1, 34, 35, 39, 18, 47, 48, 49, 50, 38, 37, 19, 45, 17, 14, 24, 33, 32, 6, 46, 29, 15, 40, 13, 26, 30, 28);
        //MB: Several genetic tests vs joke_md
        t(31, 37, 43, 29, 26, 48, 10, 12, 42, 36, 15, 19, 49, 11, 39, 13, 25, 18, 16, 32, 5, 21, 28, 46, 34, 14, 38, 23, 40, 45, 30, 41, 9, 47, 27, 50, 17, 35, 22, 33, 8, 1, 20, 3, 24, 6, 2, 44, 7, 4);
        t(36, 39, 34, 15, 45, 37, 12, 43, 17, 28, 46, 16, 13, 9, 19, 48, 30, 29, 22, 49, 50, 14, 33, 35, 38, 42, 8, 18, 21, 27, 31, 6, 10, 32, 41, 24, 5, 1, 20, 47, 25, 26, 44, 7, 40, 4, 23, 3, 11, 2);
        t(15, 32, 44, 36, 45, 43, 19, 35, 46, 23, 17, 33, 11, 25, 12, 49, 34, 40, 48, 50, 29, 16, 31, 28, 41, 20, 14, 13, 6, 26, 39, 47, 38, 37, 27, 21, 5, 30, 3, 18, 42, 7, 24, 9, 4, 10, 1, 22, 8, 2);
        //MB: Several genetic tests vs joke_re.java
        t(46, 22, 21, 8, 37, 34, 1, 41, 11, 9, 18, 36, 10, 32, 19, 49, 30, 50, 35, 39, 45, 47, 48, 43, 33, 14, 44, 3, 6, 20, 24, 17, 28, 26, 4, 23, 42, 31, 5, 38, 40, 12, 15, 29, 25, 13, 16, 27, 2, 7);
        t(23, 17, 48, 37, 49, 3, 42, 7, 45, 26, 50, 10, 33, 31, 11, 9, 18, 35, 46, 12, 19, 2, 44, 41, 5, 24, 32, 13, 15, 29, 47, 25, 1, 43, 8, 4, 14, 27, 22, 21, 6, 40, 28, 30, 36, 38, 16, 20, 34, 39);
        t(36, 22, 21, 8, 37, 2, 41, 11, 9, 20, 43, 44, 42, 6, 40, 26, 4, 24, 3, 5, 1, 31, 7, 23, 14, 10, 48, 13, 33, 19, 35, 12, 15, 25, 32, 16, 17, 30, 46, 29, 45, 28, 38, 47, 34, 18, 49, 39, 50, 27);
        //MB: Several genetic tests vs joke_nn.cpp
        t(49, 22, 21, 27, 33, 31, 32, 3, 43, 5, 44, 42, 4, 6, 18, 11, 12, 7, 28, 19, 47, 50, 15, 38, 10, 36, 40, 37, 39, 48, 25, 16, 29, 17, 26, 30, 45, 34, 35, 14, 9, 46, 41, 24, 23, 20, 2, 13, 1, 8);
        t(45, 22, 21, 24, 29, 11, 14, 1, 3, 8, 4, 6, 33, 32, 34, 7, 35, 20, 48, 17, 30, 16, 15, 40, 31, 36, 37, 18, 19, 26, 27, 49, 39, 28, 25, 10, 47, 38, 42, 9, 43, 23, 46, 2, 12, 41, 44, 50, 13, 5);
        t(28, 33, 31, 39, 11, 12, 14, 1, 5, 22, 23, 2, 47, 44, 43, 46, 17, 50, 26, 20, 48, 16, 30, 25, 36, 49, 37, 38, 29, 19, 35, 27, 18, 40, 42, 8, 24, 7, 15, 4, 34, 6, 13, 9, 32, 3, 10, 41, 21, 45);
        //MB: Several genetic tests vs joke_halyavin.java
        t(11, 12, 22, 44, 45, 41, 46, 13, 29, 33, 34, 37, 23, 28, 19, 16, 31, 48, 27, 39, 38, 25, 36, 15, 18, 26, 4, 24, 7, 21, 49, 35, 17, 20, 30, 10, 50, 40, 14, 32, 43, 2, 47, 9, 8, 5, 1, 42, 6, 3);
        t(42, 44, 41, 11, 43, 33, 22, 27, 19, 38, 23, 16, 35, 28, 13, 12, 49, 25, 36, 18, 26, 45, 39, 48, 37, 21, 46, 34, 1, 5, 29, 17, 47, 20, 30, 40, 10, 50, 31, 24, 14, 32, 7, 8, 6, 2, 9, 3, 15, 4);
        //MB: WA tests for joke_md_wa_greedy2.java
        t(16, 11, 12, 9, 32, 41, 22, 23, 4, 44, 13, 5, 50, 30, 43, 14, 31, 42, 1, 33, 34, 21, 8, 47, 39, 48, 45, 24, 25, 46, 27, 2, 36, 26, 17, 40, 29, 35, 49, 38, 20, 28, 19, 18, 37, 15, 3, 6, 7, 10);
        t(34, 48, 2, 44, 4, 3, 1, 7, 19, 14, 46, 20, 11, 12, 9, 8, 43, 6, 13, 39, 29, 16, 23, 15, 33, 47, 41, 17, 40, 38, 18, 42, 5, 32, 31, 22, 24, 25, 26, 27, 37, 45, 36, 30, 21, 10, 50, 49, 28, 35);
        t(2, 34, 23, 36, 17, 37, 4, 3, 43, 44, 8, 26, 21, 40, 24, 38, 15, 33, 48, 18, 31, 19, 12, 27, 20, 1, 10, 11, 5, 9, 16, 45, 30, 29, 35, 41, 25, 28, 32, 47, 42, 14, 6, 22, 46, 39, 49, 7, 13);
        t(18, 17, 9, 36, 16, 32, 43, 38, 35, 46, 29, 20, 24, 19, 22, 49, 8, 6, 33, 47, 13, 2, 15, 45, 37, 28, 11, 44, 3, 42, 26, 27, 30, 48, 34, 7, 10, 25, 40, 4, 1, 41, 14, 23, 5, 12, 39, 21, 31);
        t(26, 24, 32, 25, 13, 30, 48, 18, 3, 2, 41, 17, 49, 27, 35, 38, 44, 45, 36, 33, 43, 46, 19, 23, 40, 8, 12, 10, 7, 29, 31, 39, 47, 22, 16, 37, 34, 6, 21, 42, 14, 1, 11, 4, 20, 28, 5, 15, 9);
        t(28, 6, 29, 24, 38, 1, 27, 11, 46, 26, 9, 40, 33, 48, 43, 44, 4, 3, 2, 37, 25, 30, 23, 16, 21, 15, 32, 34, 13, 49, 7, 14, 17, 45, 5, 18, 42, 31, 41, 36, 19, 39, 8, 10, 47, 22, 20, 12, 35);
        t(19, 46, 16, 39, 9, 25, 7, 2, 45, 31, 33, 10, 35, 22, 42, 8, 32, 15, 47, 13, 43, 4, 3, 6, 48, 30, 41, 37, 20, 24, 21, 29, 1, 40, 18, 34, 26, 5, 28, 38, 36, 11, 17, 12, 27, 14, 44, 23, 49);
        t(11, 36, 49, 26, 29, 2, 4, 22, 5, 15, 32, 12, 10, 9, 40, 16, 8, 14, 43, 45, 13, 47, 23, 20, 33, 46, 28, 18, 21, 48, 30, 7, 37, 41, 31, 25, 17, 3, 35, 19, 1, 44, 42, 24, 39, 6, 27, 34, 38);
        //MB: Several genetic tests vs joke_md_ok_greedy.java
        t(6, 43, 33, 13, 10, 48, 19, 36, 42, 21, 2, 12, 8, 16, 24, 30, 29, 3, 4, 34, 41, 7, 27, 45, 32, 40, 37, 17, 5, 20, 14, 1, 44, 28, 11, 22, 15, 25, 49, 26, 38, 23, 35, 31, 39, 18, 50, 46, 47, 9);
        t(14, 40, 11, 28, 46, 21, 7, 8, 50, 12, 41, 6, 31, 3, 13, 39, 34, 49, 43, 35, 19, 16, 26, 15, 36, 30, 4, 17, 20, 37, 10, 24, 44, 18, 5, 22, 29, 47, 33, 9, 48, 23, 2, 32, 1, 42, 25, 38, 27, 45);
        t(24, 25, 14, 3, 42, 12, 7, 15, 26, 21, 28, 40, 37, 39, 48, 34, 8, 33, 17, 16, 11, 19, 13, 1, 31, 9, 5, 6, 20, 45, 46, 22, 27, 10, 36, 43, 35, 18, 38, 4, 44, 23, 2, 32, 30, 50, 29, 49, 41, 47);
        t(10, 36, 31, 3, 13, 33, 5, 19, 6, 28, 17, 48, 11, 42, 25, 44, 50, 38, 40, 12, 1, 21, 8, 43, 39, 9, 29, 15, 27, 23, 2, 32, 22, 41, 24, 45, 7, 26, 4, 18, 20, 46, 34, 35, 16, 37, 47, 14, 30, 49);
        t(26, 43, 8, 20, 35, 30, 39, 21, 50, 27, 19, 16, 22, 49, 47, 45, 6, 28, 37, 7, 36, 14, 1, 41, 44, 10, 18, 46, 42, 4, 29, 24, 25, 40, 38, 33, 31, 3, 13, 34, 17, 15, 48, 23, 2, 32, 5, 9, 12, 11);
        t(19, 22, 46, 50, 47, 10, 40, 45, 24, 16, 39, 29, 49, 27, 18, 36, 44, 43, 7, 23, 8, 35, 15, 17, 42, 28, 25, 33, 3, 41, 4, 14, 6, 26, 2, 13, 1, 31, 21, 30, 20, 9, 38, 11, 12, 48, 32, 5, 34, 37);
        t(33, 12, 5, 30, 40, 20, 43, 34, 8, 32, 3, 23, 41, 4, 1, 26, 22, 13, 16, 49, 39, 27, 21, 36, 11, 35, 19, 44, 50, 10, 37, 38, 14, 7, 24, 2, 42, 6, 45, 46, 48, 9, 47, 15, 31, 29, 28, 17, 18, 25);
        t(39, 46, 31, 3, 13, 19, 6, 33, 49, 42, 26, 38, 22, 40, 18, 44, 23, 14, 1, 41, 9, 45, 25, 24, 47, 27, 37, 35, 50, 30, 32, 16, 36, 17, 21, 2, 11, 12, 8, 15, 7, 43, 4, 34, 28, 10, 48, 20, 29, 5);
        t(13, 40, 29, 34, 9, 47, 28, 10, 30, 8, 38, 27, 23, 2, 32, 22, 17, 25, 49, 48, 42, 12, 1, 21, 5, 20, 45, 36, 26, 3, 33, 41, 4, 14, 15, 7, 50, 31, 11, 16, 39, 18, 19, 6, 35, 37, 43, 24, 44, 46);
        t(7, 42, 34, 40, 23, 2, 32, 22, 12, 1, 21, 5, 26, 33, 41, 4, 14, 15, 20, 49, 35, 48, 10, 37, 39, 29, 30, 19, 17, 36, 43, 18, 46, 25, 16, 38, 9, 27, 31, 3, 11, 13, 8, 24, 28, 44, 6, 50, 45, 47);
    }

	void tr(int n) {
		List<Integer> p = new ArrayList<>();
		for (int i = 1; i <= n; i++) {
			p.add(i);
		}
		Collections.shuffle(p, r);
		t(p);
	}

	private void t(Collection<Integer> p) {
		t(p.toArray(new Integer[p.size()]));
	}

	private void t(Integer... p) {
		open();
		for (Integer i : p) {
			out.print(i);
		}
		out.println();
		close();
	}

	private void open() {
		try {
			testName = "" + curTest / 10 + curTest % 10;
			out = new PrintWriter(new File(dir, testName));
			if (verbose) {
				System.out.print("Generating " + testName + "...");
			}
		} catch (IOException e) {
			throw new RuntimeException("Unable to open " + testName + " for writing", e);
		}
	}

	private void close() {
		out.close();
		if (verbose) {
			System.out.println(" done.");
		}
		curTest++;
	}

	public static void main(String[] args) {
		Locale.setDefault(Locale.US);
		dir.mkdirs();
		new Tests().run();
	}
}

