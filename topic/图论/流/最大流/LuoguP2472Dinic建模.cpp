/**
   地图上有若干柱子，每个高度为hij
   有些柱子上有蜥蜴，蜥蜴能跳到距离不超过d的相邻柱子上
   每有一个蜥蜴跳出去，柱子高度减一，直到0为止
   问最后有多少个蜥蜴跳不出去
   求能跳出去的即可
   将柱子拆点，容量为其高度
   再建立ST即可。
*/
#include <bits/stdc++.h>
using namespace std;

//type of edge's weight
typedef int weight_t;

//just as its names
int const SIZE_OF_VERTICES = 7200;
int const SIZE_OF_EDGES = 2520000;


struct edge_t{
	int from,to;
	weight_t weight;
	int next;//Index of the array is used as pointers, ZERO means NULL
}Edge[SIZE_OF_EDGES];
int ECnt;
int Vertex[SIZE_OF_VERTICES];

//Don't forget calling it
//n is the amount of vertices
inline void initGraph(int n){
	ECnt = 2;//ECnt从2开始，空指针用0表示，反向边用^1计算
	fill(Vertex,Vertex+n+1,0);
}
//单向边
inline void mkEdge(int a,int b,weight_t w){
	Edge[ECnt].from = a;
	Edge[ECnt].to = b;
	Edge[ECnt].weight = w;
	Edge[ECnt].next = Vertex[a];
	Vertex[a] = ECnt ++;

	Edge[ECnt].from = b;
	Edge[ECnt].to = a;
	Edge[ECnt].weight = 0;
	Edge[ECnt].next = Vertex[b];
	Vertex[b] = ECnt ++;
}

int __L[SIZE_OF_VERTICES];//层次图
int Queue[SIZE_OF_VERTICES];//队列
//建立残留网络从源s到汇t的层次图，n为顶点总数
bool bfs(int s,int t,int n){
	fill(__L+1,__L+n+1,-1);

	int u,v,head,tail = 0;
	__L[Queue[tail++] = s] = 0;

	for(head=0;head<tail;++head){
		//寻找还有残量的边
		for(int p=Vertex[u = Queue[head]];p;p=Edge[p].next){
            //如果有残量又没有被搜索过的，则标记层次
			if ( Edge[p].weight > 0 && -1 == __L[v = Edge[p].to] ){
                __L[Queue[tail++]=v] = __L[u] + 1;
			}
		}
	}

	return -1 != __L[t];
}

//在层次图上搜索增广路径，本质上就是搜索可以增广的流量
//这个流量是各层之间流量的最小值
//u为当前节点，cf为已经搜索出的结果，t为汇点
weight_t dfs(int u,weight_t cf,int t){
	if ( u == t ) return cf;

	weight_t tf = 0;//tf记录u往下一层的总可行流量
	for(int p=Vertex[u];p;p=Edge[p].next){
		int v = Edge[p].to;
		weight_t c = Edge[p].weight;

		if ( __L[u] + 1 == __L[v] && c > 0 && cf > tf ){
			weight_t f = dfs(v,min(c,cf-tf),t);
			if ( 0 == f ) continue;

			Edge[p].weight -= f;//正向边减去可行流量
			Edge[p^1].weight += f;//反向边加上
			tf += f;
		}
	}
	if ( 0 == tf ) __L[u] = -1;//修改层次图
	return tf;
}

//Dinic算法，s为源，t为汇，n为图顶点总数
weight_t Dinic(int s,int t,int n){
	weight_t ret = 0;
	while( bfs(s,t,n) ){//第一步建立分层图
		weight_t ans;
		//第二步在分层图上查找一条增广路径的可行流量
		while( ans = dfs(s,INT_MAX,t) )
			ret += ans;
	}
	return ret;
}

char A[22][22],B[22][22];
int X[440],Y[440];
int Index[22][22];

int dist2(int idx,int jdx){
    int x = X[idx] - X[jdx];
    int y = Y[idx] - Y[jdx];
    return x*x+y*y;
}

int main(){
    //freopen("1.txt","r",stdin);
    int r,c,d;
    scanf("%d%d%d",&r,&c,&d);
    int n = 0;
    for(int i=0;i<r;++i){
        scanf("%s",A[i]);
        for(char*p=A[i];*p;++p)if(*p!='0')X[++n]=i,Index[i][Y[n]=p-A[i]]=n;
    }
    for(int i=0;i<r;++i)scanf("%s",B[i]);
    //建图
    int vn = n + n + 2;
    int s = vn-1, t = vn;
    initGraph(vn);
    int sum = 0;
    //s到蜥蜴有一条单向边
    for(int i=0;i<r;++i)for(int j=0;j<c;++j)if('L'==B[i][j]){
        mkEdge(s,Index[i][j],1);
        ++sum;
    }
    int d2 = d*d;
    for(int i=1;i<=n;++i){
        //拆点
        mkEdge(i,i+n,A[X[i]][Y[i]]-'0');
        //柱子之间有双向边
        for(int j=i+1;j<=n;++j)if(dist2(i,j)<=d2){
            mkEdge(i+n,j,10000000);
            mkEdge(j+n,i,10000000);
        }
        //能够跳出去的
        if(X[i]<d||X[i]>=r-d||Y[i]<d||Y[i]>=c-d){
            mkEdge(i+n,t,10000000);
        }
    }
    printf("%d\n",sum-Dinic(s,t,vn));
    return 0;
}
